
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Fund
 * 
 */
export type Fund = $Result.DefaultSelection<Prisma.$FundPayload>
/**
 * Model FundDocument
 * 
 */
export type FundDocument = $Result.DefaultSelection<Prisma.$FundDocumentPayload>
/**
 * Model BackgroundJob
 * 
 */
export type BackgroundJob = $Result.DefaultSelection<Prisma.$BackgroundJobPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const FundStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED'
};

export type FundStatus = (typeof FundStatus)[keyof typeof FundStatus]


export const DocumentType: {
  APPLICATION_FORM: 'APPLICATION_FORM',
  SELECTION_CRITERIA: 'SELECTION_CRITERIA',
  GOOD_EXAMPLES: 'GOOD_EXAMPLES',
  OUTPUT_TEMPLATES: 'OUTPUT_TEMPLATES'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const JobType: {
  RAG_PROCESSING: 'RAG_PROCESSING',
  DOCUMENT_ANALYSIS: 'DOCUMENT_ANALYSIS'
};

export type JobType = (typeof JobType)[keyof typeof JobType]


export const JobStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]

}

export type FundStatus = $Enums.FundStatus

export const FundStatus: typeof $Enums.FundStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type JobType = $Enums.JobType

export const JobType: typeof $Enums.JobType

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Funds
 * const funds = await prisma.fund.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Funds
   * const funds = await prisma.fund.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.fund`: Exposes CRUD operations for the **Fund** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funds
    * const funds = await prisma.fund.findMany()
    * ```
    */
  get fund(): Prisma.FundDelegate<ExtArgs>;

  /**
   * `prisma.fundDocument`: Exposes CRUD operations for the **FundDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FundDocuments
    * const fundDocuments = await prisma.fundDocument.findMany()
    * ```
    */
  get fundDocument(): Prisma.FundDocumentDelegate<ExtArgs>;

  /**
   * `prisma.backgroundJob`: Exposes CRUD operations for the **BackgroundJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BackgroundJobs
    * const backgroundJobs = await prisma.backgroundJob.findMany()
    * ```
    */
  get backgroundJob(): Prisma.BackgroundJobDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Fund: 'Fund',
    FundDocument: 'FundDocument',
    BackgroundJob: 'BackgroundJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "fund" | "fundDocument" | "backgroundJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Fund: {
        payload: Prisma.$FundPayload<ExtArgs>
        fields: Prisma.FundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          findFirst: {
            args: Prisma.FundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          findMany: {
            args: Prisma.FundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>[]
          }
          create: {
            args: Prisma.FundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          createMany: {
            args: Prisma.FundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>[]
          }
          delete: {
            args: Prisma.FundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          update: {
            args: Prisma.FundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          deleteMany: {
            args: Prisma.FundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundPayload>
          }
          aggregate: {
            args: Prisma.FundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFund>
          }
          groupBy: {
            args: Prisma.FundGroupByArgs<ExtArgs>
            result: $Utils.Optional<FundGroupByOutputType>[]
          }
          count: {
            args: Prisma.FundCountArgs<ExtArgs>
            result: $Utils.Optional<FundCountAggregateOutputType> | number
          }
        }
      }
      FundDocument: {
        payload: Prisma.$FundDocumentPayload<ExtArgs>
        fields: Prisma.FundDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FundDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FundDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          findFirst: {
            args: Prisma.FundDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FundDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          findMany: {
            args: Prisma.FundDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>[]
          }
          create: {
            args: Prisma.FundDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          createMany: {
            args: Prisma.FundDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FundDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>[]
          }
          delete: {
            args: Prisma.FundDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          update: {
            args: Prisma.FundDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          deleteMany: {
            args: Prisma.FundDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FundDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FundDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FundDocumentPayload>
          }
          aggregate: {
            args: Prisma.FundDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFundDocument>
          }
          groupBy: {
            args: Prisma.FundDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FundDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FundDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<FundDocumentCountAggregateOutputType> | number
          }
        }
      }
      BackgroundJob: {
        payload: Prisma.$BackgroundJobPayload<ExtArgs>
        fields: Prisma.BackgroundJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BackgroundJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BackgroundJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          findFirst: {
            args: Prisma.BackgroundJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BackgroundJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          findMany: {
            args: Prisma.BackgroundJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>[]
          }
          create: {
            args: Prisma.BackgroundJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          createMany: {
            args: Prisma.BackgroundJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BackgroundJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>[]
          }
          delete: {
            args: Prisma.BackgroundJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          update: {
            args: Prisma.BackgroundJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          deleteMany: {
            args: Prisma.BackgroundJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BackgroundJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BackgroundJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BackgroundJobPayload>
          }
          aggregate: {
            args: Prisma.BackgroundJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBackgroundJob>
          }
          groupBy: {
            args: Prisma.BackgroundJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<BackgroundJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.BackgroundJobCountArgs<ExtArgs>
            result: $Utils.Optional<BackgroundJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type FundCountOutputType
   */

  export type FundCountOutputType = {
    backgroundJobs: number
    documents: number
  }

  export type FundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    backgroundJobs?: boolean | FundCountOutputTypeCountBackgroundJobsArgs
    documents?: boolean | FundCountOutputTypeCountDocumentsArgs
  }

  // Custom InputTypes
  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundCountOutputType
     */
    select?: FundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeCountBackgroundJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackgroundJobWhereInput
  }

  /**
   * FundCountOutputType without action
   */
  export type FundCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundDocumentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Fund
   */

  export type AggregateFund = {
    _count: FundCountAggregateOutputType | null
    _avg: FundAvgAggregateOutputType | null
    _sum: FundSumAggregateOutputType | null
    _min: FundMinAggregateOutputType | null
    _max: FundMaxAggregateOutputType | null
  }

  export type FundAvgAggregateOutputType = {
    brainVersion: number | null
  }

  export type FundSumAggregateOutputType = {
    brainVersion: number | null
  }

  export type FundMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.FundStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    brainAssembledAt: Date | null
    brainVersion: number | null
  }

  export type FundMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.FundStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    brainAssembledAt: Date | null
    brainVersion: number | null
  }

  export type FundCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    createdAt: number
    updatedAt: number
    applicationFormAnalysis: number
    selectionCriteriaAnalysis: number
    goodExamplesAnalysis: number
    brainAssembledAt: number
    brainVersion: number
    fundBrain: number
    _all: number
  }


  export type FundAvgAggregateInputType = {
    brainVersion?: true
  }

  export type FundSumAggregateInputType = {
    brainVersion?: true
  }

  export type FundMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    brainAssembledAt?: true
    brainVersion?: true
  }

  export type FundMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    brainAssembledAt?: true
    brainVersion?: true
  }

  export type FundCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    applicationFormAnalysis?: true
    selectionCriteriaAnalysis?: true
    goodExamplesAnalysis?: true
    brainAssembledAt?: true
    brainVersion?: true
    fundBrain?: true
    _all?: true
  }

  export type FundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Fund to aggregate.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Funds
    **/
    _count?: true | FundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FundMaxAggregateInputType
  }

  export type GetFundAggregateType<T extends FundAggregateArgs> = {
        [P in keyof T & keyof AggregateFund]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFund[P]>
      : GetScalarType<T[P], AggregateFund[P]>
  }




  export type FundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundWhereInput
    orderBy?: FundOrderByWithAggregationInput | FundOrderByWithAggregationInput[]
    by: FundScalarFieldEnum[] | FundScalarFieldEnum
    having?: FundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FundCountAggregateInputType | true
    _avg?: FundAvgAggregateInputType
    _sum?: FundSumAggregateInputType
    _min?: FundMinAggregateInputType
    _max?: FundMaxAggregateInputType
  }

  export type FundGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: $Enums.FundStatus
    createdAt: Date
    updatedAt: Date
    applicationFormAnalysis: JsonValue | null
    selectionCriteriaAnalysis: JsonValue | null
    goodExamplesAnalysis: JsonValue | null
    brainAssembledAt: Date | null
    brainVersion: number
    fundBrain: JsonValue | null
    _count: FundCountAggregateOutputType | null
    _avg: FundAvgAggregateOutputType | null
    _sum: FundSumAggregateOutputType | null
    _min: FundMinAggregateOutputType | null
    _max: FundMaxAggregateOutputType | null
  }

  type GetFundGroupByPayload<T extends FundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FundGroupByOutputType[P]>
            : GetScalarType<T[P], FundGroupByOutputType[P]>
        }
      >
    >


  export type FundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicationFormAnalysis?: boolean
    selectionCriteriaAnalysis?: boolean
    goodExamplesAnalysis?: boolean
    brainAssembledAt?: boolean
    brainVersion?: boolean
    fundBrain?: boolean
    backgroundJobs?: boolean | Fund$backgroundJobsArgs<ExtArgs>
    documents?: boolean | Fund$documentsArgs<ExtArgs>
    _count?: boolean | FundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fund"]>

  export type FundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicationFormAnalysis?: boolean
    selectionCriteriaAnalysis?: boolean
    goodExamplesAnalysis?: boolean
    brainAssembledAt?: boolean
    brainVersion?: boolean
    fundBrain?: boolean
  }, ExtArgs["result"]["fund"]>

  export type FundSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicationFormAnalysis?: boolean
    selectionCriteriaAnalysis?: boolean
    goodExamplesAnalysis?: boolean
    brainAssembledAt?: boolean
    brainVersion?: boolean
    fundBrain?: boolean
  }

  export type FundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    backgroundJobs?: boolean | Fund$backgroundJobsArgs<ExtArgs>
    documents?: boolean | Fund$documentsArgs<ExtArgs>
    _count?: boolean | FundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Fund"
    objects: {
      backgroundJobs: Prisma.$BackgroundJobPayload<ExtArgs>[]
      documents: Prisma.$FundDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: $Enums.FundStatus
      createdAt: Date
      updatedAt: Date
      applicationFormAnalysis: Prisma.JsonValue | null
      selectionCriteriaAnalysis: Prisma.JsonValue | null
      goodExamplesAnalysis: Prisma.JsonValue | null
      brainAssembledAt: Date | null
      brainVersion: number
      fundBrain: Prisma.JsonValue | null
    }, ExtArgs["result"]["fund"]>
    composites: {}
  }

  type FundGetPayload<S extends boolean | null | undefined | FundDefaultArgs> = $Result.GetResult<Prisma.$FundPayload, S>

  type FundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FundFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FundCountAggregateInputType | true
    }

  export interface FundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Fund'], meta: { name: 'Fund' } }
    /**
     * Find zero or one Fund that matches the filter.
     * @param {FundFindUniqueArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FundFindUniqueArgs>(args: SelectSubset<T, FundFindUniqueArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Fund that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FundFindUniqueOrThrowArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FundFindUniqueOrThrowArgs>(args: SelectSubset<T, FundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Fund that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindFirstArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FundFindFirstArgs>(args?: SelectSubset<T, FundFindFirstArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Fund that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindFirstOrThrowArgs} args - Arguments to find a Fund
     * @example
     * // Get one Fund
     * const fund = await prisma.fund.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FundFindFirstOrThrowArgs>(args?: SelectSubset<T, FundFindFirstOrThrowArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Funds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funds
     * const funds = await prisma.fund.findMany()
     * 
     * // Get first 10 Funds
     * const funds = await prisma.fund.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fundWithIdOnly = await prisma.fund.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FundFindManyArgs>(args?: SelectSubset<T, FundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Fund.
     * @param {FundCreateArgs} args - Arguments to create a Fund.
     * @example
     * // Create one Fund
     * const Fund = await prisma.fund.create({
     *   data: {
     *     // ... data to create a Fund
     *   }
     * })
     * 
     */
    create<T extends FundCreateArgs>(args: SelectSubset<T, FundCreateArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Funds.
     * @param {FundCreateManyArgs} args - Arguments to create many Funds.
     * @example
     * // Create many Funds
     * const fund = await prisma.fund.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FundCreateManyArgs>(args?: SelectSubset<T, FundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Funds and returns the data saved in the database.
     * @param {FundCreateManyAndReturnArgs} args - Arguments to create many Funds.
     * @example
     * // Create many Funds
     * const fund = await prisma.fund.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Funds and only return the `id`
     * const fundWithIdOnly = await prisma.fund.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FundCreateManyAndReturnArgs>(args?: SelectSubset<T, FundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Fund.
     * @param {FundDeleteArgs} args - Arguments to delete one Fund.
     * @example
     * // Delete one Fund
     * const Fund = await prisma.fund.delete({
     *   where: {
     *     // ... filter to delete one Fund
     *   }
     * })
     * 
     */
    delete<T extends FundDeleteArgs>(args: SelectSubset<T, FundDeleteArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Fund.
     * @param {FundUpdateArgs} args - Arguments to update one Fund.
     * @example
     * // Update one Fund
     * const fund = await prisma.fund.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FundUpdateArgs>(args: SelectSubset<T, FundUpdateArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Funds.
     * @param {FundDeleteManyArgs} args - Arguments to filter Funds to delete.
     * @example
     * // Delete a few Funds
     * const { count } = await prisma.fund.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FundDeleteManyArgs>(args?: SelectSubset<T, FundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funds
     * const fund = await prisma.fund.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FundUpdateManyArgs>(args: SelectSubset<T, FundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Fund.
     * @param {FundUpsertArgs} args - Arguments to update or create a Fund.
     * @example
     * // Update or create a Fund
     * const fund = await prisma.fund.upsert({
     *   create: {
     *     // ... data to create a Fund
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fund we want to update
     *   }
     * })
     */
    upsert<T extends FundUpsertArgs>(args: SelectSubset<T, FundUpsertArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Funds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundCountArgs} args - Arguments to filter Funds to count.
     * @example
     * // Count the number of Funds
     * const count = await prisma.fund.count({
     *   where: {
     *     // ... the filter for the Funds we want to count
     *   }
     * })
    **/
    count<T extends FundCountArgs>(
      args?: Subset<T, FundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fund.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FundAggregateArgs>(args: Subset<T, FundAggregateArgs>): Prisma.PrismaPromise<GetFundAggregateType<T>>

    /**
     * Group by Fund.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FundGroupByArgs['orderBy'] }
        : { orderBy?: FundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Fund model
   */
  readonly fields: FundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Fund.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    backgroundJobs<T extends Fund$backgroundJobsArgs<ExtArgs> = {}>(args?: Subset<T, Fund$backgroundJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findMany"> | Null>
    documents<T extends Fund$documentsArgs<ExtArgs> = {}>(args?: Subset<T, Fund$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Fund model
   */ 
  interface FundFieldRefs {
    readonly id: FieldRef<"Fund", 'String'>
    readonly name: FieldRef<"Fund", 'String'>
    readonly description: FieldRef<"Fund", 'String'>
    readonly status: FieldRef<"Fund", 'FundStatus'>
    readonly createdAt: FieldRef<"Fund", 'DateTime'>
    readonly updatedAt: FieldRef<"Fund", 'DateTime'>
    readonly applicationFormAnalysis: FieldRef<"Fund", 'Json'>
    readonly selectionCriteriaAnalysis: FieldRef<"Fund", 'Json'>
    readonly goodExamplesAnalysis: FieldRef<"Fund", 'Json'>
    readonly brainAssembledAt: FieldRef<"Fund", 'DateTime'>
    readonly brainVersion: FieldRef<"Fund", 'Int'>
    readonly fundBrain: FieldRef<"Fund", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Fund findUnique
   */
  export type FundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund findUniqueOrThrow
   */
  export type FundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund findFirst
   */
  export type FundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funds.
     */
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund findFirstOrThrow
   */
  export type FundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Fund to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Funds.
     */
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund findMany
   */
  export type FundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter, which Funds to fetch.
     */
    where?: FundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Funds to fetch.
     */
    orderBy?: FundOrderByWithRelationInput | FundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Funds.
     */
    cursor?: FundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Funds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Funds.
     */
    skip?: number
    distinct?: FundScalarFieldEnum | FundScalarFieldEnum[]
  }

  /**
   * Fund create
   */
  export type FundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The data needed to create a Fund.
     */
    data: XOR<FundCreateInput, FundUncheckedCreateInput>
  }

  /**
   * Fund createMany
   */
  export type FundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Funds.
     */
    data: FundCreateManyInput | FundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fund createManyAndReturn
   */
  export type FundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Funds.
     */
    data: FundCreateManyInput | FundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Fund update
   */
  export type FundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The data needed to update a Fund.
     */
    data: XOR<FundUpdateInput, FundUncheckedUpdateInput>
    /**
     * Choose, which Fund to update.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund updateMany
   */
  export type FundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Funds.
     */
    data: XOR<FundUpdateManyMutationInput, FundUncheckedUpdateManyInput>
    /**
     * Filter which Funds to update
     */
    where?: FundWhereInput
  }

  /**
   * Fund upsert
   */
  export type FundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * The filter to search for the Fund to update in case it exists.
     */
    where: FundWhereUniqueInput
    /**
     * In case the Fund found by the `where` argument doesn't exist, create a new Fund with this data.
     */
    create: XOR<FundCreateInput, FundUncheckedCreateInput>
    /**
     * In case the Fund was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FundUpdateInput, FundUncheckedUpdateInput>
  }

  /**
   * Fund delete
   */
  export type FundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
    /**
     * Filter which Fund to delete.
     */
    where: FundWhereUniqueInput
  }

  /**
   * Fund deleteMany
   */
  export type FundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Funds to delete
     */
    where?: FundWhereInput
  }

  /**
   * Fund.backgroundJobs
   */
  export type Fund$backgroundJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    where?: BackgroundJobWhereInput
    orderBy?: BackgroundJobOrderByWithRelationInput | BackgroundJobOrderByWithRelationInput[]
    cursor?: BackgroundJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BackgroundJobScalarFieldEnum | BackgroundJobScalarFieldEnum[]
  }

  /**
   * Fund.documents
   */
  export type Fund$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    where?: FundDocumentWhereInput
    orderBy?: FundDocumentOrderByWithRelationInput | FundDocumentOrderByWithRelationInput[]
    cursor?: FundDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FundDocumentScalarFieldEnum | FundDocumentScalarFieldEnum[]
  }

  /**
   * Fund without action
   */
  export type FundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Fund
     */
    select?: FundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundInclude<ExtArgs> | null
  }


  /**
   * Model FundDocument
   */

  export type AggregateFundDocument = {
    _count: FundDocumentCountAggregateOutputType | null
    _avg: FundDocumentAvgAggregateOutputType | null
    _sum: FundDocumentSumAggregateOutputType | null
    _min: FundDocumentMinAggregateOutputType | null
    _max: FundDocumentMaxAggregateOutputType | null
  }

  export type FundDocumentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FundDocumentSumAggregateOutputType = {
    fileSize: number | null
  }

  export type FundDocumentMinAggregateOutputType = {
    id: string | null
    fundId: string | null
    documentType: $Enums.DocumentType | null
    filename: string | null
    mimeType: string | null
    fileSize: number | null
    s3Key: string | null
    uploadedAt: Date | null
  }

  export type FundDocumentMaxAggregateOutputType = {
    id: string | null
    fundId: string | null
    documentType: $Enums.DocumentType | null
    filename: string | null
    mimeType: string | null
    fileSize: number | null
    s3Key: string | null
    uploadedAt: Date | null
  }

  export type FundDocumentCountAggregateOutputType = {
    id: number
    fundId: number
    documentType: number
    filename: number
    mimeType: number
    fileSize: number
    s3Key: number
    uploadedAt: number
    _all: number
  }


  export type FundDocumentAvgAggregateInputType = {
    fileSize?: true
  }

  export type FundDocumentSumAggregateInputType = {
    fileSize?: true
  }

  export type FundDocumentMinAggregateInputType = {
    id?: true
    fundId?: true
    documentType?: true
    filename?: true
    mimeType?: true
    fileSize?: true
    s3Key?: true
    uploadedAt?: true
  }

  export type FundDocumentMaxAggregateInputType = {
    id?: true
    fundId?: true
    documentType?: true
    filename?: true
    mimeType?: true
    fileSize?: true
    s3Key?: true
    uploadedAt?: true
  }

  export type FundDocumentCountAggregateInputType = {
    id?: true
    fundId?: true
    documentType?: true
    filename?: true
    mimeType?: true
    fileSize?: true
    s3Key?: true
    uploadedAt?: true
    _all?: true
  }

  export type FundDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundDocument to aggregate.
     */
    where?: FundDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundDocuments to fetch.
     */
    orderBy?: FundDocumentOrderByWithRelationInput | FundDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FundDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FundDocuments
    **/
    _count?: true | FundDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FundDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FundDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FundDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FundDocumentMaxAggregateInputType
  }

  export type GetFundDocumentAggregateType<T extends FundDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateFundDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFundDocument[P]>
      : GetScalarType<T[P], AggregateFundDocument[P]>
  }




  export type FundDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FundDocumentWhereInput
    orderBy?: FundDocumentOrderByWithAggregationInput | FundDocumentOrderByWithAggregationInput[]
    by: FundDocumentScalarFieldEnum[] | FundDocumentScalarFieldEnum
    having?: FundDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FundDocumentCountAggregateInputType | true
    _avg?: FundDocumentAvgAggregateInputType
    _sum?: FundDocumentSumAggregateInputType
    _min?: FundDocumentMinAggregateInputType
    _max?: FundDocumentMaxAggregateInputType
  }

  export type FundDocumentGroupByOutputType = {
    id: string
    fundId: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt: Date
    _count: FundDocumentCountAggregateOutputType | null
    _avg: FundDocumentAvgAggregateOutputType | null
    _sum: FundDocumentSumAggregateOutputType | null
    _min: FundDocumentMinAggregateOutputType | null
    _max: FundDocumentMaxAggregateOutputType | null
  }

  type GetFundDocumentGroupByPayload<T extends FundDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FundDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FundDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FundDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], FundDocumentGroupByOutputType[P]>
        }
      >
    >


  export type FundDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fundId?: boolean
    documentType?: boolean
    filename?: boolean
    mimeType?: boolean
    fileSize?: boolean
    s3Key?: boolean
    uploadedAt?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundDocument"]>

  export type FundDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fundId?: boolean
    documentType?: boolean
    filename?: boolean
    mimeType?: boolean
    fileSize?: boolean
    s3Key?: boolean
    uploadedAt?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fundDocument"]>

  export type FundDocumentSelectScalar = {
    id?: boolean
    fundId?: boolean
    documentType?: boolean
    filename?: boolean
    mimeType?: boolean
    fileSize?: boolean
    s3Key?: boolean
    uploadedAt?: boolean
  }

  export type FundDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }
  export type FundDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }

  export type $FundDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FundDocument"
    objects: {
      fund: Prisma.$FundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fundId: string
      documentType: $Enums.DocumentType
      filename: string
      mimeType: string
      fileSize: number
      s3Key: string
      uploadedAt: Date
    }, ExtArgs["result"]["fundDocument"]>
    composites: {}
  }

  type FundDocumentGetPayload<S extends boolean | null | undefined | FundDocumentDefaultArgs> = $Result.GetResult<Prisma.$FundDocumentPayload, S>

  type FundDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FundDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FundDocumentCountAggregateInputType | true
    }

  export interface FundDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FundDocument'], meta: { name: 'FundDocument' } }
    /**
     * Find zero or one FundDocument that matches the filter.
     * @param {FundDocumentFindUniqueArgs} args - Arguments to find a FundDocument
     * @example
     * // Get one FundDocument
     * const fundDocument = await prisma.fundDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FundDocumentFindUniqueArgs>(args: SelectSubset<T, FundDocumentFindUniqueArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FundDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FundDocumentFindUniqueOrThrowArgs} args - Arguments to find a FundDocument
     * @example
     * // Get one FundDocument
     * const fundDocument = await prisma.fundDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FundDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, FundDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FundDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentFindFirstArgs} args - Arguments to find a FundDocument
     * @example
     * // Get one FundDocument
     * const fundDocument = await prisma.fundDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FundDocumentFindFirstArgs>(args?: SelectSubset<T, FundDocumentFindFirstArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FundDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentFindFirstOrThrowArgs} args - Arguments to find a FundDocument
     * @example
     * // Get one FundDocument
     * const fundDocument = await prisma.fundDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FundDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, FundDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FundDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FundDocuments
     * const fundDocuments = await prisma.fundDocument.findMany()
     * 
     * // Get first 10 FundDocuments
     * const fundDocuments = await prisma.fundDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fundDocumentWithIdOnly = await prisma.fundDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FundDocumentFindManyArgs>(args?: SelectSubset<T, FundDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FundDocument.
     * @param {FundDocumentCreateArgs} args - Arguments to create a FundDocument.
     * @example
     * // Create one FundDocument
     * const FundDocument = await prisma.fundDocument.create({
     *   data: {
     *     // ... data to create a FundDocument
     *   }
     * })
     * 
     */
    create<T extends FundDocumentCreateArgs>(args: SelectSubset<T, FundDocumentCreateArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FundDocuments.
     * @param {FundDocumentCreateManyArgs} args - Arguments to create many FundDocuments.
     * @example
     * // Create many FundDocuments
     * const fundDocument = await prisma.fundDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FundDocumentCreateManyArgs>(args?: SelectSubset<T, FundDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FundDocuments and returns the data saved in the database.
     * @param {FundDocumentCreateManyAndReturnArgs} args - Arguments to create many FundDocuments.
     * @example
     * // Create many FundDocuments
     * const fundDocument = await prisma.fundDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FundDocuments and only return the `id`
     * const fundDocumentWithIdOnly = await prisma.fundDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FundDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, FundDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FundDocument.
     * @param {FundDocumentDeleteArgs} args - Arguments to delete one FundDocument.
     * @example
     * // Delete one FundDocument
     * const FundDocument = await prisma.fundDocument.delete({
     *   where: {
     *     // ... filter to delete one FundDocument
     *   }
     * })
     * 
     */
    delete<T extends FundDocumentDeleteArgs>(args: SelectSubset<T, FundDocumentDeleteArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FundDocument.
     * @param {FundDocumentUpdateArgs} args - Arguments to update one FundDocument.
     * @example
     * // Update one FundDocument
     * const fundDocument = await prisma.fundDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FundDocumentUpdateArgs>(args: SelectSubset<T, FundDocumentUpdateArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FundDocuments.
     * @param {FundDocumentDeleteManyArgs} args - Arguments to filter FundDocuments to delete.
     * @example
     * // Delete a few FundDocuments
     * const { count } = await prisma.fundDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FundDocumentDeleteManyArgs>(args?: SelectSubset<T, FundDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FundDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FundDocuments
     * const fundDocument = await prisma.fundDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FundDocumentUpdateManyArgs>(args: SelectSubset<T, FundDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FundDocument.
     * @param {FundDocumentUpsertArgs} args - Arguments to update or create a FundDocument.
     * @example
     * // Update or create a FundDocument
     * const fundDocument = await prisma.fundDocument.upsert({
     *   create: {
     *     // ... data to create a FundDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FundDocument we want to update
     *   }
     * })
     */
    upsert<T extends FundDocumentUpsertArgs>(args: SelectSubset<T, FundDocumentUpsertArgs<ExtArgs>>): Prisma__FundDocumentClient<$Result.GetResult<Prisma.$FundDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FundDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentCountArgs} args - Arguments to filter FundDocuments to count.
     * @example
     * // Count the number of FundDocuments
     * const count = await prisma.fundDocument.count({
     *   where: {
     *     // ... the filter for the FundDocuments we want to count
     *   }
     * })
    **/
    count<T extends FundDocumentCountArgs>(
      args?: Subset<T, FundDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FundDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FundDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FundDocumentAggregateArgs>(args: Subset<T, FundDocumentAggregateArgs>): Prisma.PrismaPromise<GetFundDocumentAggregateType<T>>

    /**
     * Group by FundDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FundDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FundDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FundDocumentGroupByArgs['orderBy'] }
        : { orderBy?: FundDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FundDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFundDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FundDocument model
   */
  readonly fields: FundDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FundDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FundDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fund<T extends FundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FundDefaultArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FundDocument model
   */ 
  interface FundDocumentFieldRefs {
    readonly id: FieldRef<"FundDocument", 'String'>
    readonly fundId: FieldRef<"FundDocument", 'String'>
    readonly documentType: FieldRef<"FundDocument", 'DocumentType'>
    readonly filename: FieldRef<"FundDocument", 'String'>
    readonly mimeType: FieldRef<"FundDocument", 'String'>
    readonly fileSize: FieldRef<"FundDocument", 'Int'>
    readonly s3Key: FieldRef<"FundDocument", 'String'>
    readonly uploadedAt: FieldRef<"FundDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FundDocument findUnique
   */
  export type FundDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter, which FundDocument to fetch.
     */
    where: FundDocumentWhereUniqueInput
  }

  /**
   * FundDocument findUniqueOrThrow
   */
  export type FundDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter, which FundDocument to fetch.
     */
    where: FundDocumentWhereUniqueInput
  }

  /**
   * FundDocument findFirst
   */
  export type FundDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter, which FundDocument to fetch.
     */
    where?: FundDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundDocuments to fetch.
     */
    orderBy?: FundDocumentOrderByWithRelationInput | FundDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundDocuments.
     */
    cursor?: FundDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundDocuments.
     */
    distinct?: FundDocumentScalarFieldEnum | FundDocumentScalarFieldEnum[]
  }

  /**
   * FundDocument findFirstOrThrow
   */
  export type FundDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter, which FundDocument to fetch.
     */
    where?: FundDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundDocuments to fetch.
     */
    orderBy?: FundDocumentOrderByWithRelationInput | FundDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FundDocuments.
     */
    cursor?: FundDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FundDocuments.
     */
    distinct?: FundDocumentScalarFieldEnum | FundDocumentScalarFieldEnum[]
  }

  /**
   * FundDocument findMany
   */
  export type FundDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter, which FundDocuments to fetch.
     */
    where?: FundDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FundDocuments to fetch.
     */
    orderBy?: FundDocumentOrderByWithRelationInput | FundDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FundDocuments.
     */
    cursor?: FundDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FundDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FundDocuments.
     */
    skip?: number
    distinct?: FundDocumentScalarFieldEnum | FundDocumentScalarFieldEnum[]
  }

  /**
   * FundDocument create
   */
  export type FundDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a FundDocument.
     */
    data: XOR<FundDocumentCreateInput, FundDocumentUncheckedCreateInput>
  }

  /**
   * FundDocument createMany
   */
  export type FundDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FundDocuments.
     */
    data: FundDocumentCreateManyInput | FundDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FundDocument createManyAndReturn
   */
  export type FundDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FundDocuments.
     */
    data: FundDocumentCreateManyInput | FundDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FundDocument update
   */
  export type FundDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a FundDocument.
     */
    data: XOR<FundDocumentUpdateInput, FundDocumentUncheckedUpdateInput>
    /**
     * Choose, which FundDocument to update.
     */
    where: FundDocumentWhereUniqueInput
  }

  /**
   * FundDocument updateMany
   */
  export type FundDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FundDocuments.
     */
    data: XOR<FundDocumentUpdateManyMutationInput, FundDocumentUncheckedUpdateManyInput>
    /**
     * Filter which FundDocuments to update
     */
    where?: FundDocumentWhereInput
  }

  /**
   * FundDocument upsert
   */
  export type FundDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the FundDocument to update in case it exists.
     */
    where: FundDocumentWhereUniqueInput
    /**
     * In case the FundDocument found by the `where` argument doesn't exist, create a new FundDocument with this data.
     */
    create: XOR<FundDocumentCreateInput, FundDocumentUncheckedCreateInput>
    /**
     * In case the FundDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FundDocumentUpdateInput, FundDocumentUncheckedUpdateInput>
  }

  /**
   * FundDocument delete
   */
  export type FundDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
    /**
     * Filter which FundDocument to delete.
     */
    where: FundDocumentWhereUniqueInput
  }

  /**
   * FundDocument deleteMany
   */
  export type FundDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FundDocuments to delete
     */
    where?: FundDocumentWhereInput
  }

  /**
   * FundDocument without action
   */
  export type FundDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FundDocument
     */
    select?: FundDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FundDocumentInclude<ExtArgs> | null
  }


  /**
   * Model BackgroundJob
   */

  export type AggregateBackgroundJob = {
    _count: BackgroundJobCountAggregateOutputType | null
    _avg: BackgroundJobAvgAggregateOutputType | null
    _sum: BackgroundJobSumAggregateOutputType | null
    _min: BackgroundJobMinAggregateOutputType | null
    _max: BackgroundJobMaxAggregateOutputType | null
  }

  export type BackgroundJobAvgAggregateOutputType = {
    progress: number | null
    totalDocuments: number | null
    processedDocuments: number | null
  }

  export type BackgroundJobSumAggregateOutputType = {
    progress: number | null
    totalDocuments: number | null
    processedDocuments: number | null
  }

  export type BackgroundJobMinAggregateOutputType = {
    id: string | null
    fundId: string | null
    type: $Enums.JobType | null
    status: $Enums.JobStatus | null
    progress: number | null
    totalDocuments: number | null
    processedDocuments: number | null
    errorMessage: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BackgroundJobMaxAggregateOutputType = {
    id: string | null
    fundId: string | null
    type: $Enums.JobType | null
    status: $Enums.JobStatus | null
    progress: number | null
    totalDocuments: number | null
    processedDocuments: number | null
    errorMessage: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BackgroundJobCountAggregateOutputType = {
    id: number
    fundId: number
    type: number
    status: number
    progress: number
    totalDocuments: number
    processedDocuments: number
    metadata: number
    errorMessage: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BackgroundJobAvgAggregateInputType = {
    progress?: true
    totalDocuments?: true
    processedDocuments?: true
  }

  export type BackgroundJobSumAggregateInputType = {
    progress?: true
    totalDocuments?: true
    processedDocuments?: true
  }

  export type BackgroundJobMinAggregateInputType = {
    id?: true
    fundId?: true
    type?: true
    status?: true
    progress?: true
    totalDocuments?: true
    processedDocuments?: true
    errorMessage?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BackgroundJobMaxAggregateInputType = {
    id?: true
    fundId?: true
    type?: true
    status?: true
    progress?: true
    totalDocuments?: true
    processedDocuments?: true
    errorMessage?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BackgroundJobCountAggregateInputType = {
    id?: true
    fundId?: true
    type?: true
    status?: true
    progress?: true
    totalDocuments?: true
    processedDocuments?: true
    metadata?: true
    errorMessage?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BackgroundJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BackgroundJob to aggregate.
     */
    where?: BackgroundJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BackgroundJobs to fetch.
     */
    orderBy?: BackgroundJobOrderByWithRelationInput | BackgroundJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BackgroundJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BackgroundJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BackgroundJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BackgroundJobs
    **/
    _count?: true | BackgroundJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BackgroundJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BackgroundJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BackgroundJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BackgroundJobMaxAggregateInputType
  }

  export type GetBackgroundJobAggregateType<T extends BackgroundJobAggregateArgs> = {
        [P in keyof T & keyof AggregateBackgroundJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBackgroundJob[P]>
      : GetScalarType<T[P], AggregateBackgroundJob[P]>
  }




  export type BackgroundJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BackgroundJobWhereInput
    orderBy?: BackgroundJobOrderByWithAggregationInput | BackgroundJobOrderByWithAggregationInput[]
    by: BackgroundJobScalarFieldEnum[] | BackgroundJobScalarFieldEnum
    having?: BackgroundJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BackgroundJobCountAggregateInputType | true
    _avg?: BackgroundJobAvgAggregateInputType
    _sum?: BackgroundJobSumAggregateInputType
    _min?: BackgroundJobMinAggregateInputType
    _max?: BackgroundJobMaxAggregateInputType
  }

  export type BackgroundJobGroupByOutputType = {
    id: string
    fundId: string
    type: $Enums.JobType
    status: $Enums.JobStatus
    progress: number
    totalDocuments: number
    processedDocuments: number
    metadata: JsonValue
    errorMessage: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: BackgroundJobCountAggregateOutputType | null
    _avg: BackgroundJobAvgAggregateOutputType | null
    _sum: BackgroundJobSumAggregateOutputType | null
    _min: BackgroundJobMinAggregateOutputType | null
    _max: BackgroundJobMaxAggregateOutputType | null
  }

  type GetBackgroundJobGroupByPayload<T extends BackgroundJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BackgroundJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BackgroundJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BackgroundJobGroupByOutputType[P]>
            : GetScalarType<T[P], BackgroundJobGroupByOutputType[P]>
        }
      >
    >


  export type BackgroundJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fundId?: boolean
    type?: boolean
    status?: boolean
    progress?: boolean
    totalDocuments?: boolean
    processedDocuments?: boolean
    metadata?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["backgroundJob"]>

  export type BackgroundJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fundId?: boolean
    type?: boolean
    status?: boolean
    progress?: boolean
    totalDocuments?: boolean
    processedDocuments?: boolean
    metadata?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["backgroundJob"]>

  export type BackgroundJobSelectScalar = {
    id?: boolean
    fundId?: boolean
    type?: boolean
    status?: boolean
    progress?: boolean
    totalDocuments?: boolean
    processedDocuments?: boolean
    metadata?: boolean
    errorMessage?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BackgroundJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }
  export type BackgroundJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fund?: boolean | FundDefaultArgs<ExtArgs>
  }

  export type $BackgroundJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BackgroundJob"
    objects: {
      fund: Prisma.$FundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fundId: string
      type: $Enums.JobType
      status: $Enums.JobStatus
      progress: number
      totalDocuments: number
      processedDocuments: number
      metadata: Prisma.JsonValue
      errorMessage: string | null
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["backgroundJob"]>
    composites: {}
  }

  type BackgroundJobGetPayload<S extends boolean | null | undefined | BackgroundJobDefaultArgs> = $Result.GetResult<Prisma.$BackgroundJobPayload, S>

  type BackgroundJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BackgroundJobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BackgroundJobCountAggregateInputType | true
    }

  export interface BackgroundJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BackgroundJob'], meta: { name: 'BackgroundJob' } }
    /**
     * Find zero or one BackgroundJob that matches the filter.
     * @param {BackgroundJobFindUniqueArgs} args - Arguments to find a BackgroundJob
     * @example
     * // Get one BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BackgroundJobFindUniqueArgs>(args: SelectSubset<T, BackgroundJobFindUniqueArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BackgroundJob that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BackgroundJobFindUniqueOrThrowArgs} args - Arguments to find a BackgroundJob
     * @example
     * // Get one BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BackgroundJobFindUniqueOrThrowArgs>(args: SelectSubset<T, BackgroundJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BackgroundJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobFindFirstArgs} args - Arguments to find a BackgroundJob
     * @example
     * // Get one BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BackgroundJobFindFirstArgs>(args?: SelectSubset<T, BackgroundJobFindFirstArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BackgroundJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobFindFirstOrThrowArgs} args - Arguments to find a BackgroundJob
     * @example
     * // Get one BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BackgroundJobFindFirstOrThrowArgs>(args?: SelectSubset<T, BackgroundJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BackgroundJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BackgroundJobs
     * const backgroundJobs = await prisma.backgroundJob.findMany()
     * 
     * // Get first 10 BackgroundJobs
     * const backgroundJobs = await prisma.backgroundJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const backgroundJobWithIdOnly = await prisma.backgroundJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BackgroundJobFindManyArgs>(args?: SelectSubset<T, BackgroundJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BackgroundJob.
     * @param {BackgroundJobCreateArgs} args - Arguments to create a BackgroundJob.
     * @example
     * // Create one BackgroundJob
     * const BackgroundJob = await prisma.backgroundJob.create({
     *   data: {
     *     // ... data to create a BackgroundJob
     *   }
     * })
     * 
     */
    create<T extends BackgroundJobCreateArgs>(args: SelectSubset<T, BackgroundJobCreateArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BackgroundJobs.
     * @param {BackgroundJobCreateManyArgs} args - Arguments to create many BackgroundJobs.
     * @example
     * // Create many BackgroundJobs
     * const backgroundJob = await prisma.backgroundJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BackgroundJobCreateManyArgs>(args?: SelectSubset<T, BackgroundJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BackgroundJobs and returns the data saved in the database.
     * @param {BackgroundJobCreateManyAndReturnArgs} args - Arguments to create many BackgroundJobs.
     * @example
     * // Create many BackgroundJobs
     * const backgroundJob = await prisma.backgroundJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BackgroundJobs and only return the `id`
     * const backgroundJobWithIdOnly = await prisma.backgroundJob.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BackgroundJobCreateManyAndReturnArgs>(args?: SelectSubset<T, BackgroundJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BackgroundJob.
     * @param {BackgroundJobDeleteArgs} args - Arguments to delete one BackgroundJob.
     * @example
     * // Delete one BackgroundJob
     * const BackgroundJob = await prisma.backgroundJob.delete({
     *   where: {
     *     // ... filter to delete one BackgroundJob
     *   }
     * })
     * 
     */
    delete<T extends BackgroundJobDeleteArgs>(args: SelectSubset<T, BackgroundJobDeleteArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BackgroundJob.
     * @param {BackgroundJobUpdateArgs} args - Arguments to update one BackgroundJob.
     * @example
     * // Update one BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BackgroundJobUpdateArgs>(args: SelectSubset<T, BackgroundJobUpdateArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BackgroundJobs.
     * @param {BackgroundJobDeleteManyArgs} args - Arguments to filter BackgroundJobs to delete.
     * @example
     * // Delete a few BackgroundJobs
     * const { count } = await prisma.backgroundJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BackgroundJobDeleteManyArgs>(args?: SelectSubset<T, BackgroundJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BackgroundJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BackgroundJobs
     * const backgroundJob = await prisma.backgroundJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BackgroundJobUpdateManyArgs>(args: SelectSubset<T, BackgroundJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BackgroundJob.
     * @param {BackgroundJobUpsertArgs} args - Arguments to update or create a BackgroundJob.
     * @example
     * // Update or create a BackgroundJob
     * const backgroundJob = await prisma.backgroundJob.upsert({
     *   create: {
     *     // ... data to create a BackgroundJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BackgroundJob we want to update
     *   }
     * })
     */
    upsert<T extends BackgroundJobUpsertArgs>(args: SelectSubset<T, BackgroundJobUpsertArgs<ExtArgs>>): Prisma__BackgroundJobClient<$Result.GetResult<Prisma.$BackgroundJobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BackgroundJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobCountArgs} args - Arguments to filter BackgroundJobs to count.
     * @example
     * // Count the number of BackgroundJobs
     * const count = await prisma.backgroundJob.count({
     *   where: {
     *     // ... the filter for the BackgroundJobs we want to count
     *   }
     * })
    **/
    count<T extends BackgroundJobCountArgs>(
      args?: Subset<T, BackgroundJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BackgroundJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BackgroundJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BackgroundJobAggregateArgs>(args: Subset<T, BackgroundJobAggregateArgs>): Prisma.PrismaPromise<GetBackgroundJobAggregateType<T>>

    /**
     * Group by BackgroundJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BackgroundJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BackgroundJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BackgroundJobGroupByArgs['orderBy'] }
        : { orderBy?: BackgroundJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BackgroundJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBackgroundJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BackgroundJob model
   */
  readonly fields: BackgroundJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BackgroundJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BackgroundJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fund<T extends FundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FundDefaultArgs<ExtArgs>>): Prisma__FundClient<$Result.GetResult<Prisma.$FundPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BackgroundJob model
   */ 
  interface BackgroundJobFieldRefs {
    readonly id: FieldRef<"BackgroundJob", 'String'>
    readonly fundId: FieldRef<"BackgroundJob", 'String'>
    readonly type: FieldRef<"BackgroundJob", 'JobType'>
    readonly status: FieldRef<"BackgroundJob", 'JobStatus'>
    readonly progress: FieldRef<"BackgroundJob", 'Int'>
    readonly totalDocuments: FieldRef<"BackgroundJob", 'Int'>
    readonly processedDocuments: FieldRef<"BackgroundJob", 'Int'>
    readonly metadata: FieldRef<"BackgroundJob", 'Json'>
    readonly errorMessage: FieldRef<"BackgroundJob", 'String'>
    readonly startedAt: FieldRef<"BackgroundJob", 'DateTime'>
    readonly completedAt: FieldRef<"BackgroundJob", 'DateTime'>
    readonly createdAt: FieldRef<"BackgroundJob", 'DateTime'>
    readonly updatedAt: FieldRef<"BackgroundJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BackgroundJob findUnique
   */
  export type BackgroundJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter, which BackgroundJob to fetch.
     */
    where: BackgroundJobWhereUniqueInput
  }

  /**
   * BackgroundJob findUniqueOrThrow
   */
  export type BackgroundJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter, which BackgroundJob to fetch.
     */
    where: BackgroundJobWhereUniqueInput
  }

  /**
   * BackgroundJob findFirst
   */
  export type BackgroundJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter, which BackgroundJob to fetch.
     */
    where?: BackgroundJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BackgroundJobs to fetch.
     */
    orderBy?: BackgroundJobOrderByWithRelationInput | BackgroundJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BackgroundJobs.
     */
    cursor?: BackgroundJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BackgroundJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BackgroundJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BackgroundJobs.
     */
    distinct?: BackgroundJobScalarFieldEnum | BackgroundJobScalarFieldEnum[]
  }

  /**
   * BackgroundJob findFirstOrThrow
   */
  export type BackgroundJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter, which BackgroundJob to fetch.
     */
    where?: BackgroundJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BackgroundJobs to fetch.
     */
    orderBy?: BackgroundJobOrderByWithRelationInput | BackgroundJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BackgroundJobs.
     */
    cursor?: BackgroundJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BackgroundJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BackgroundJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BackgroundJobs.
     */
    distinct?: BackgroundJobScalarFieldEnum | BackgroundJobScalarFieldEnum[]
  }

  /**
   * BackgroundJob findMany
   */
  export type BackgroundJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter, which BackgroundJobs to fetch.
     */
    where?: BackgroundJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BackgroundJobs to fetch.
     */
    orderBy?: BackgroundJobOrderByWithRelationInput | BackgroundJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BackgroundJobs.
     */
    cursor?: BackgroundJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BackgroundJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BackgroundJobs.
     */
    skip?: number
    distinct?: BackgroundJobScalarFieldEnum | BackgroundJobScalarFieldEnum[]
  }

  /**
   * BackgroundJob create
   */
  export type BackgroundJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * The data needed to create a BackgroundJob.
     */
    data: XOR<BackgroundJobCreateInput, BackgroundJobUncheckedCreateInput>
  }

  /**
   * BackgroundJob createMany
   */
  export type BackgroundJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BackgroundJobs.
     */
    data: BackgroundJobCreateManyInput | BackgroundJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BackgroundJob createManyAndReturn
   */
  export type BackgroundJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BackgroundJobs.
     */
    data: BackgroundJobCreateManyInput | BackgroundJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BackgroundJob update
   */
  export type BackgroundJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * The data needed to update a BackgroundJob.
     */
    data: XOR<BackgroundJobUpdateInput, BackgroundJobUncheckedUpdateInput>
    /**
     * Choose, which BackgroundJob to update.
     */
    where: BackgroundJobWhereUniqueInput
  }

  /**
   * BackgroundJob updateMany
   */
  export type BackgroundJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BackgroundJobs.
     */
    data: XOR<BackgroundJobUpdateManyMutationInput, BackgroundJobUncheckedUpdateManyInput>
    /**
     * Filter which BackgroundJobs to update
     */
    where?: BackgroundJobWhereInput
  }

  /**
   * BackgroundJob upsert
   */
  export type BackgroundJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * The filter to search for the BackgroundJob to update in case it exists.
     */
    where: BackgroundJobWhereUniqueInput
    /**
     * In case the BackgroundJob found by the `where` argument doesn't exist, create a new BackgroundJob with this data.
     */
    create: XOR<BackgroundJobCreateInput, BackgroundJobUncheckedCreateInput>
    /**
     * In case the BackgroundJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BackgroundJobUpdateInput, BackgroundJobUncheckedUpdateInput>
  }

  /**
   * BackgroundJob delete
   */
  export type BackgroundJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
    /**
     * Filter which BackgroundJob to delete.
     */
    where: BackgroundJobWhereUniqueInput
  }

  /**
   * BackgroundJob deleteMany
   */
  export type BackgroundJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BackgroundJobs to delete
     */
    where?: BackgroundJobWhereInput
  }

  /**
   * BackgroundJob without action
   */
  export type BackgroundJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BackgroundJob
     */
    select?: BackgroundJobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BackgroundJobInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FundScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    applicationFormAnalysis: 'applicationFormAnalysis',
    selectionCriteriaAnalysis: 'selectionCriteriaAnalysis',
    goodExamplesAnalysis: 'goodExamplesAnalysis',
    brainAssembledAt: 'brainAssembledAt',
    brainVersion: 'brainVersion',
    fundBrain: 'fundBrain'
  };

  export type FundScalarFieldEnum = (typeof FundScalarFieldEnum)[keyof typeof FundScalarFieldEnum]


  export const FundDocumentScalarFieldEnum: {
    id: 'id',
    fundId: 'fundId',
    documentType: 'documentType',
    filename: 'filename',
    mimeType: 'mimeType',
    fileSize: 'fileSize',
    s3Key: 's3Key',
    uploadedAt: 'uploadedAt'
  };

  export type FundDocumentScalarFieldEnum = (typeof FundDocumentScalarFieldEnum)[keyof typeof FundDocumentScalarFieldEnum]


  export const BackgroundJobScalarFieldEnum: {
    id: 'id',
    fundId: 'fundId',
    type: 'type',
    status: 'status',
    progress: 'progress',
    totalDocuments: 'totalDocuments',
    processedDocuments: 'processedDocuments',
    metadata: 'metadata',
    errorMessage: 'errorMessage',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BackgroundJobScalarFieldEnum = (typeof BackgroundJobScalarFieldEnum)[keyof typeof BackgroundJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'FundStatus'
   */
  export type EnumFundStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FundStatus'>
    


  /**
   * Reference to a field of type 'FundStatus[]'
   */
  export type ListEnumFundStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FundStatus[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'JobType'
   */
  export type EnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType'>
    


  /**
   * Reference to a field of type 'JobType[]'
   */
  export type ListEnumJobTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobType[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type FundWhereInput = {
    AND?: FundWhereInput | FundWhereInput[]
    OR?: FundWhereInput[]
    NOT?: FundWhereInput | FundWhereInput[]
    id?: StringFilter<"Fund"> | string
    name?: StringFilter<"Fund"> | string
    description?: StringNullableFilter<"Fund"> | string | null
    status?: EnumFundStatusFilter<"Fund"> | $Enums.FundStatus
    createdAt?: DateTimeFilter<"Fund"> | Date | string
    updatedAt?: DateTimeFilter<"Fund"> | Date | string
    applicationFormAnalysis?: JsonNullableFilter<"Fund">
    selectionCriteriaAnalysis?: JsonNullableFilter<"Fund">
    goodExamplesAnalysis?: JsonNullableFilter<"Fund">
    brainAssembledAt?: DateTimeNullableFilter<"Fund"> | Date | string | null
    brainVersion?: IntFilter<"Fund"> | number
    fundBrain?: JsonNullableFilter<"Fund">
    backgroundJobs?: BackgroundJobListRelationFilter
    documents?: FundDocumentListRelationFilter
  }

  export type FundOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicationFormAnalysis?: SortOrderInput | SortOrder
    selectionCriteriaAnalysis?: SortOrderInput | SortOrder
    goodExamplesAnalysis?: SortOrderInput | SortOrder
    brainAssembledAt?: SortOrderInput | SortOrder
    brainVersion?: SortOrder
    fundBrain?: SortOrderInput | SortOrder
    backgroundJobs?: BackgroundJobOrderByRelationAggregateInput
    documents?: FundDocumentOrderByRelationAggregateInput
  }

  export type FundWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FundWhereInput | FundWhereInput[]
    OR?: FundWhereInput[]
    NOT?: FundWhereInput | FundWhereInput[]
    name?: StringFilter<"Fund"> | string
    description?: StringNullableFilter<"Fund"> | string | null
    status?: EnumFundStatusFilter<"Fund"> | $Enums.FundStatus
    createdAt?: DateTimeFilter<"Fund"> | Date | string
    updatedAt?: DateTimeFilter<"Fund"> | Date | string
    applicationFormAnalysis?: JsonNullableFilter<"Fund">
    selectionCriteriaAnalysis?: JsonNullableFilter<"Fund">
    goodExamplesAnalysis?: JsonNullableFilter<"Fund">
    brainAssembledAt?: DateTimeNullableFilter<"Fund"> | Date | string | null
    brainVersion?: IntFilter<"Fund"> | number
    fundBrain?: JsonNullableFilter<"Fund">
    backgroundJobs?: BackgroundJobListRelationFilter
    documents?: FundDocumentListRelationFilter
  }, "id">

  export type FundOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicationFormAnalysis?: SortOrderInput | SortOrder
    selectionCriteriaAnalysis?: SortOrderInput | SortOrder
    goodExamplesAnalysis?: SortOrderInput | SortOrder
    brainAssembledAt?: SortOrderInput | SortOrder
    brainVersion?: SortOrder
    fundBrain?: SortOrderInput | SortOrder
    _count?: FundCountOrderByAggregateInput
    _avg?: FundAvgOrderByAggregateInput
    _max?: FundMaxOrderByAggregateInput
    _min?: FundMinOrderByAggregateInput
    _sum?: FundSumOrderByAggregateInput
  }

  export type FundScalarWhereWithAggregatesInput = {
    AND?: FundScalarWhereWithAggregatesInput | FundScalarWhereWithAggregatesInput[]
    OR?: FundScalarWhereWithAggregatesInput[]
    NOT?: FundScalarWhereWithAggregatesInput | FundScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Fund"> | string
    name?: StringWithAggregatesFilter<"Fund"> | string
    description?: StringNullableWithAggregatesFilter<"Fund"> | string | null
    status?: EnumFundStatusWithAggregatesFilter<"Fund"> | $Enums.FundStatus
    createdAt?: DateTimeWithAggregatesFilter<"Fund"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Fund"> | Date | string
    applicationFormAnalysis?: JsonNullableWithAggregatesFilter<"Fund">
    selectionCriteriaAnalysis?: JsonNullableWithAggregatesFilter<"Fund">
    goodExamplesAnalysis?: JsonNullableWithAggregatesFilter<"Fund">
    brainAssembledAt?: DateTimeNullableWithAggregatesFilter<"Fund"> | Date | string | null
    brainVersion?: IntWithAggregatesFilter<"Fund"> | number
    fundBrain?: JsonNullableWithAggregatesFilter<"Fund">
  }

  export type FundDocumentWhereInput = {
    AND?: FundDocumentWhereInput | FundDocumentWhereInput[]
    OR?: FundDocumentWhereInput[]
    NOT?: FundDocumentWhereInput | FundDocumentWhereInput[]
    id?: StringFilter<"FundDocument"> | string
    fundId?: StringFilter<"FundDocument"> | string
    documentType?: EnumDocumentTypeFilter<"FundDocument"> | $Enums.DocumentType
    filename?: StringFilter<"FundDocument"> | string
    mimeType?: StringFilter<"FundDocument"> | string
    fileSize?: IntFilter<"FundDocument"> | number
    s3Key?: StringFilter<"FundDocument"> | string
    uploadedAt?: DateTimeFilter<"FundDocument"> | Date | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }

  export type FundDocumentOrderByWithRelationInput = {
    id?: SortOrder
    fundId?: SortOrder
    documentType?: SortOrder
    filename?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    s3Key?: SortOrder
    uploadedAt?: SortOrder
    fund?: FundOrderByWithRelationInput
  }

  export type FundDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FundDocumentWhereInput | FundDocumentWhereInput[]
    OR?: FundDocumentWhereInput[]
    NOT?: FundDocumentWhereInput | FundDocumentWhereInput[]
    fundId?: StringFilter<"FundDocument"> | string
    documentType?: EnumDocumentTypeFilter<"FundDocument"> | $Enums.DocumentType
    filename?: StringFilter<"FundDocument"> | string
    mimeType?: StringFilter<"FundDocument"> | string
    fileSize?: IntFilter<"FundDocument"> | number
    s3Key?: StringFilter<"FundDocument"> | string
    uploadedAt?: DateTimeFilter<"FundDocument"> | Date | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }, "id">

  export type FundDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    fundId?: SortOrder
    documentType?: SortOrder
    filename?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    s3Key?: SortOrder
    uploadedAt?: SortOrder
    _count?: FundDocumentCountOrderByAggregateInput
    _avg?: FundDocumentAvgOrderByAggregateInput
    _max?: FundDocumentMaxOrderByAggregateInput
    _min?: FundDocumentMinOrderByAggregateInput
    _sum?: FundDocumentSumOrderByAggregateInput
  }

  export type FundDocumentScalarWhereWithAggregatesInput = {
    AND?: FundDocumentScalarWhereWithAggregatesInput | FundDocumentScalarWhereWithAggregatesInput[]
    OR?: FundDocumentScalarWhereWithAggregatesInput[]
    NOT?: FundDocumentScalarWhereWithAggregatesInput | FundDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FundDocument"> | string
    fundId?: StringWithAggregatesFilter<"FundDocument"> | string
    documentType?: EnumDocumentTypeWithAggregatesFilter<"FundDocument"> | $Enums.DocumentType
    filename?: StringWithAggregatesFilter<"FundDocument"> | string
    mimeType?: StringWithAggregatesFilter<"FundDocument"> | string
    fileSize?: IntWithAggregatesFilter<"FundDocument"> | number
    s3Key?: StringWithAggregatesFilter<"FundDocument"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"FundDocument"> | Date | string
  }

  export type BackgroundJobWhereInput = {
    AND?: BackgroundJobWhereInput | BackgroundJobWhereInput[]
    OR?: BackgroundJobWhereInput[]
    NOT?: BackgroundJobWhereInput | BackgroundJobWhereInput[]
    id?: StringFilter<"BackgroundJob"> | string
    fundId?: StringFilter<"BackgroundJob"> | string
    type?: EnumJobTypeFilter<"BackgroundJob"> | $Enums.JobType
    status?: EnumJobStatusFilter<"BackgroundJob"> | $Enums.JobStatus
    progress?: IntFilter<"BackgroundJob"> | number
    totalDocuments?: IntFilter<"BackgroundJob"> | number
    processedDocuments?: IntFilter<"BackgroundJob"> | number
    metadata?: JsonFilter<"BackgroundJob">
    errorMessage?: StringNullableFilter<"BackgroundJob"> | string | null
    startedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    createdAt?: DateTimeFilter<"BackgroundJob"> | Date | string
    updatedAt?: DateTimeFilter<"BackgroundJob"> | Date | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }

  export type BackgroundJobOrderByWithRelationInput = {
    id?: SortOrder
    fundId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
    metadata?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fund?: FundOrderByWithRelationInput
  }

  export type BackgroundJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BackgroundJobWhereInput | BackgroundJobWhereInput[]
    OR?: BackgroundJobWhereInput[]
    NOT?: BackgroundJobWhereInput | BackgroundJobWhereInput[]
    fundId?: StringFilter<"BackgroundJob"> | string
    type?: EnumJobTypeFilter<"BackgroundJob"> | $Enums.JobType
    status?: EnumJobStatusFilter<"BackgroundJob"> | $Enums.JobStatus
    progress?: IntFilter<"BackgroundJob"> | number
    totalDocuments?: IntFilter<"BackgroundJob"> | number
    processedDocuments?: IntFilter<"BackgroundJob"> | number
    metadata?: JsonFilter<"BackgroundJob">
    errorMessage?: StringNullableFilter<"BackgroundJob"> | string | null
    startedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    createdAt?: DateTimeFilter<"BackgroundJob"> | Date | string
    updatedAt?: DateTimeFilter<"BackgroundJob"> | Date | string
    fund?: XOR<FundRelationFilter, FundWhereInput>
  }, "id">

  export type BackgroundJobOrderByWithAggregationInput = {
    id?: SortOrder
    fundId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
    metadata?: SortOrder
    errorMessage?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BackgroundJobCountOrderByAggregateInput
    _avg?: BackgroundJobAvgOrderByAggregateInput
    _max?: BackgroundJobMaxOrderByAggregateInput
    _min?: BackgroundJobMinOrderByAggregateInput
    _sum?: BackgroundJobSumOrderByAggregateInput
  }

  export type BackgroundJobScalarWhereWithAggregatesInput = {
    AND?: BackgroundJobScalarWhereWithAggregatesInput | BackgroundJobScalarWhereWithAggregatesInput[]
    OR?: BackgroundJobScalarWhereWithAggregatesInput[]
    NOT?: BackgroundJobScalarWhereWithAggregatesInput | BackgroundJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BackgroundJob"> | string
    fundId?: StringWithAggregatesFilter<"BackgroundJob"> | string
    type?: EnumJobTypeWithAggregatesFilter<"BackgroundJob"> | $Enums.JobType
    status?: EnumJobStatusWithAggregatesFilter<"BackgroundJob"> | $Enums.JobStatus
    progress?: IntWithAggregatesFilter<"BackgroundJob"> | number
    totalDocuments?: IntWithAggregatesFilter<"BackgroundJob"> | number
    processedDocuments?: IntWithAggregatesFilter<"BackgroundJob"> | number
    metadata?: JsonWithAggregatesFilter<"BackgroundJob">
    errorMessage?: StringNullableWithAggregatesFilter<"BackgroundJob"> | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"BackgroundJob"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"BackgroundJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"BackgroundJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BackgroundJob"> | Date | string
  }

  export type FundCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobCreateNestedManyWithoutFundInput
    documents?: FundDocumentCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUncheckedCreateNestedManyWithoutFundInput
    documents?: FundDocumentUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUpdateManyWithoutFundNestedInput
    documents?: FundDocumentUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUncheckedUpdateManyWithoutFundNestedInput
    documents?: FundDocumentUncheckedUpdateManyWithoutFundNestedInput
  }

  export type FundCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FundUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FundUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
  }

  export type FundDocumentCreateInput = {
    id?: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
    fund: FundCreateNestedOneWithoutDocumentsInput
  }

  export type FundDocumentUncheckedCreateInput = {
    id?: string
    fundId: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
  }

  export type FundDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fund?: FundUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type FundDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundDocumentCreateManyInput = {
    id?: string
    fundId: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
  }

  export type FundDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BackgroundJobCreateInput = {
    id?: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fund: FundCreateNestedOneWithoutBackgroundJobsInput
  }

  export type BackgroundJobUncheckedCreateInput = {
    id?: string
    fundId: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BackgroundJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fund?: FundUpdateOneRequiredWithoutBackgroundJobsNestedInput
  }

  export type BackgroundJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BackgroundJobCreateManyInput = {
    id?: string
    fundId: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BackgroundJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BackgroundJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fundId?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumFundStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FundStatus | EnumFundStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFundStatusFilter<$PrismaModel> | $Enums.FundStatus
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BackgroundJobListRelationFilter = {
    every?: BackgroundJobWhereInput
    some?: BackgroundJobWhereInput
    none?: BackgroundJobWhereInput
  }

  export type FundDocumentListRelationFilter = {
    every?: FundDocumentWhereInput
    some?: FundDocumentWhereInput
    none?: FundDocumentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BackgroundJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FundDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FundCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicationFormAnalysis?: SortOrder
    selectionCriteriaAnalysis?: SortOrder
    goodExamplesAnalysis?: SortOrder
    brainAssembledAt?: SortOrder
    brainVersion?: SortOrder
    fundBrain?: SortOrder
  }

  export type FundAvgOrderByAggregateInput = {
    brainVersion?: SortOrder
  }

  export type FundMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brainAssembledAt?: SortOrder
    brainVersion?: SortOrder
  }

  export type FundMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    brainAssembledAt?: SortOrder
    brainVersion?: SortOrder
  }

  export type FundSumOrderByAggregateInput = {
    brainVersion?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumFundStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FundStatus | EnumFundStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFundStatusWithAggregatesFilter<$PrismaModel> | $Enums.FundStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFundStatusFilter<$PrismaModel>
    _max?: NestedEnumFundStatusFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type FundRelationFilter = {
    is?: FundWhereInput
    isNot?: FundWhereInput
  }

  export type FundDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    documentType?: SortOrder
    filename?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    s3Key?: SortOrder
    uploadedAt?: SortOrder
  }

  export type FundDocumentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FundDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    documentType?: SortOrder
    filename?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    s3Key?: SortOrder
    uploadedAt?: SortOrder
  }

  export type FundDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    documentType?: SortOrder
    filename?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    s3Key?: SortOrder
    uploadedAt?: SortOrder
  }

  export type FundDocumentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type EnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BackgroundJobCountOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
    metadata?: SortOrder
    errorMessage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BackgroundJobAvgOrderByAggregateInput = {
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
  }

  export type BackgroundJobMaxOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
    errorMessage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BackgroundJobMinOrderByAggregateInput = {
    id?: SortOrder
    fundId?: SortOrder
    type?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
    errorMessage?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BackgroundJobSumOrderByAggregateInput = {
    progress?: SortOrder
    totalDocuments?: SortOrder
    processedDocuments?: SortOrder
  }

  export type EnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BackgroundJobCreateNestedManyWithoutFundInput = {
    create?: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput> | BackgroundJobCreateWithoutFundInput[] | BackgroundJobUncheckedCreateWithoutFundInput[]
    connectOrCreate?: BackgroundJobCreateOrConnectWithoutFundInput | BackgroundJobCreateOrConnectWithoutFundInput[]
    createMany?: BackgroundJobCreateManyFundInputEnvelope
    connect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
  }

  export type FundDocumentCreateNestedManyWithoutFundInput = {
    create?: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput> | FundDocumentCreateWithoutFundInput[] | FundDocumentUncheckedCreateWithoutFundInput[]
    connectOrCreate?: FundDocumentCreateOrConnectWithoutFundInput | FundDocumentCreateOrConnectWithoutFundInput[]
    createMany?: FundDocumentCreateManyFundInputEnvelope
    connect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
  }

  export type BackgroundJobUncheckedCreateNestedManyWithoutFundInput = {
    create?: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput> | BackgroundJobCreateWithoutFundInput[] | BackgroundJobUncheckedCreateWithoutFundInput[]
    connectOrCreate?: BackgroundJobCreateOrConnectWithoutFundInput | BackgroundJobCreateOrConnectWithoutFundInput[]
    createMany?: BackgroundJobCreateManyFundInputEnvelope
    connect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
  }

  export type FundDocumentUncheckedCreateNestedManyWithoutFundInput = {
    create?: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput> | FundDocumentCreateWithoutFundInput[] | FundDocumentUncheckedCreateWithoutFundInput[]
    connectOrCreate?: FundDocumentCreateOrConnectWithoutFundInput | FundDocumentCreateOrConnectWithoutFundInput[]
    createMany?: FundDocumentCreateManyFundInputEnvelope
    connect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumFundStatusFieldUpdateOperationsInput = {
    set?: $Enums.FundStatus
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BackgroundJobUpdateManyWithoutFundNestedInput = {
    create?: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput> | BackgroundJobCreateWithoutFundInput[] | BackgroundJobUncheckedCreateWithoutFundInput[]
    connectOrCreate?: BackgroundJobCreateOrConnectWithoutFundInput | BackgroundJobCreateOrConnectWithoutFundInput[]
    upsert?: BackgroundJobUpsertWithWhereUniqueWithoutFundInput | BackgroundJobUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: BackgroundJobCreateManyFundInputEnvelope
    set?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    disconnect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    delete?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    connect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    update?: BackgroundJobUpdateWithWhereUniqueWithoutFundInput | BackgroundJobUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: BackgroundJobUpdateManyWithWhereWithoutFundInput | BackgroundJobUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: BackgroundJobScalarWhereInput | BackgroundJobScalarWhereInput[]
  }

  export type FundDocumentUpdateManyWithoutFundNestedInput = {
    create?: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput> | FundDocumentCreateWithoutFundInput[] | FundDocumentUncheckedCreateWithoutFundInput[]
    connectOrCreate?: FundDocumentCreateOrConnectWithoutFundInput | FundDocumentCreateOrConnectWithoutFundInput[]
    upsert?: FundDocumentUpsertWithWhereUniqueWithoutFundInput | FundDocumentUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: FundDocumentCreateManyFundInputEnvelope
    set?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    disconnect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    delete?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    connect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    update?: FundDocumentUpdateWithWhereUniqueWithoutFundInput | FundDocumentUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: FundDocumentUpdateManyWithWhereWithoutFundInput | FundDocumentUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: FundDocumentScalarWhereInput | FundDocumentScalarWhereInput[]
  }

  export type BackgroundJobUncheckedUpdateManyWithoutFundNestedInput = {
    create?: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput> | BackgroundJobCreateWithoutFundInput[] | BackgroundJobUncheckedCreateWithoutFundInput[]
    connectOrCreate?: BackgroundJobCreateOrConnectWithoutFundInput | BackgroundJobCreateOrConnectWithoutFundInput[]
    upsert?: BackgroundJobUpsertWithWhereUniqueWithoutFundInput | BackgroundJobUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: BackgroundJobCreateManyFundInputEnvelope
    set?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    disconnect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    delete?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    connect?: BackgroundJobWhereUniqueInput | BackgroundJobWhereUniqueInput[]
    update?: BackgroundJobUpdateWithWhereUniqueWithoutFundInput | BackgroundJobUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: BackgroundJobUpdateManyWithWhereWithoutFundInput | BackgroundJobUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: BackgroundJobScalarWhereInput | BackgroundJobScalarWhereInput[]
  }

  export type FundDocumentUncheckedUpdateManyWithoutFundNestedInput = {
    create?: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput> | FundDocumentCreateWithoutFundInput[] | FundDocumentUncheckedCreateWithoutFundInput[]
    connectOrCreate?: FundDocumentCreateOrConnectWithoutFundInput | FundDocumentCreateOrConnectWithoutFundInput[]
    upsert?: FundDocumentUpsertWithWhereUniqueWithoutFundInput | FundDocumentUpsertWithWhereUniqueWithoutFundInput[]
    createMany?: FundDocumentCreateManyFundInputEnvelope
    set?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    disconnect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    delete?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    connect?: FundDocumentWhereUniqueInput | FundDocumentWhereUniqueInput[]
    update?: FundDocumentUpdateWithWhereUniqueWithoutFundInput | FundDocumentUpdateWithWhereUniqueWithoutFundInput[]
    updateMany?: FundDocumentUpdateManyWithWhereWithoutFundInput | FundDocumentUpdateManyWithWhereWithoutFundInput[]
    deleteMany?: FundDocumentScalarWhereInput | FundDocumentScalarWhereInput[]
  }

  export type FundCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<FundCreateWithoutDocumentsInput, FundUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: FundCreateOrConnectWithoutDocumentsInput
    connect?: FundWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type FundUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<FundCreateWithoutDocumentsInput, FundUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: FundCreateOrConnectWithoutDocumentsInput
    upsert?: FundUpsertWithoutDocumentsInput
    connect?: FundWhereUniqueInput
    update?: XOR<XOR<FundUpdateToOneWithWhereWithoutDocumentsInput, FundUpdateWithoutDocumentsInput>, FundUncheckedUpdateWithoutDocumentsInput>
  }

  export type FundCreateNestedOneWithoutBackgroundJobsInput = {
    create?: XOR<FundCreateWithoutBackgroundJobsInput, FundUncheckedCreateWithoutBackgroundJobsInput>
    connectOrCreate?: FundCreateOrConnectWithoutBackgroundJobsInput
    connect?: FundWhereUniqueInput
  }

  export type EnumJobTypeFieldUpdateOperationsInput = {
    set?: $Enums.JobType
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type FundUpdateOneRequiredWithoutBackgroundJobsNestedInput = {
    create?: XOR<FundCreateWithoutBackgroundJobsInput, FundUncheckedCreateWithoutBackgroundJobsInput>
    connectOrCreate?: FundCreateOrConnectWithoutBackgroundJobsInput
    upsert?: FundUpsertWithoutBackgroundJobsInput
    connect?: FundWhereUniqueInput
    update?: XOR<XOR<FundUpdateToOneWithWhereWithoutBackgroundJobsInput, FundUpdateWithoutBackgroundJobsInput>, FundUncheckedUpdateWithoutBackgroundJobsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumFundStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.FundStatus | EnumFundStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFundStatusFilter<$PrismaModel> | $Enums.FundStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumFundStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FundStatus | EnumFundStatusFieldRefInput<$PrismaModel>
    in?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.FundStatus[] | ListEnumFundStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumFundStatusWithAggregatesFilter<$PrismaModel> | $Enums.FundStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFundStatusFilter<$PrismaModel>
    _max?: NestedEnumFundStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumJobTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeFilter<$PrismaModel> | $Enums.JobType
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumJobTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobType | EnumJobTypeFieldRefInput<$PrismaModel>
    in?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobType[] | ListEnumJobTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumJobTypeWithAggregatesFilter<$PrismaModel> | $Enums.JobType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobTypeFilter<$PrismaModel>
    _max?: NestedEnumJobTypeFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BackgroundJobCreateWithoutFundInput = {
    id?: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BackgroundJobUncheckedCreateWithoutFundInput = {
    id?: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BackgroundJobCreateOrConnectWithoutFundInput = {
    where: BackgroundJobWhereUniqueInput
    create: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput>
  }

  export type BackgroundJobCreateManyFundInputEnvelope = {
    data: BackgroundJobCreateManyFundInput | BackgroundJobCreateManyFundInput[]
    skipDuplicates?: boolean
  }

  export type FundDocumentCreateWithoutFundInput = {
    id?: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
  }

  export type FundDocumentUncheckedCreateWithoutFundInput = {
    id?: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
  }

  export type FundDocumentCreateOrConnectWithoutFundInput = {
    where: FundDocumentWhereUniqueInput
    create: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput>
  }

  export type FundDocumentCreateManyFundInputEnvelope = {
    data: FundDocumentCreateManyFundInput | FundDocumentCreateManyFundInput[]
    skipDuplicates?: boolean
  }

  export type BackgroundJobUpsertWithWhereUniqueWithoutFundInput = {
    where: BackgroundJobWhereUniqueInput
    update: XOR<BackgroundJobUpdateWithoutFundInput, BackgroundJobUncheckedUpdateWithoutFundInput>
    create: XOR<BackgroundJobCreateWithoutFundInput, BackgroundJobUncheckedCreateWithoutFundInput>
  }

  export type BackgroundJobUpdateWithWhereUniqueWithoutFundInput = {
    where: BackgroundJobWhereUniqueInput
    data: XOR<BackgroundJobUpdateWithoutFundInput, BackgroundJobUncheckedUpdateWithoutFundInput>
  }

  export type BackgroundJobUpdateManyWithWhereWithoutFundInput = {
    where: BackgroundJobScalarWhereInput
    data: XOR<BackgroundJobUpdateManyMutationInput, BackgroundJobUncheckedUpdateManyWithoutFundInput>
  }

  export type BackgroundJobScalarWhereInput = {
    AND?: BackgroundJobScalarWhereInput | BackgroundJobScalarWhereInput[]
    OR?: BackgroundJobScalarWhereInput[]
    NOT?: BackgroundJobScalarWhereInput | BackgroundJobScalarWhereInput[]
    id?: StringFilter<"BackgroundJob"> | string
    fundId?: StringFilter<"BackgroundJob"> | string
    type?: EnumJobTypeFilter<"BackgroundJob"> | $Enums.JobType
    status?: EnumJobStatusFilter<"BackgroundJob"> | $Enums.JobStatus
    progress?: IntFilter<"BackgroundJob"> | number
    totalDocuments?: IntFilter<"BackgroundJob"> | number
    processedDocuments?: IntFilter<"BackgroundJob"> | number
    metadata?: JsonFilter<"BackgroundJob">
    errorMessage?: StringNullableFilter<"BackgroundJob"> | string | null
    startedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"BackgroundJob"> | Date | string | null
    createdAt?: DateTimeFilter<"BackgroundJob"> | Date | string
    updatedAt?: DateTimeFilter<"BackgroundJob"> | Date | string
  }

  export type FundDocumentUpsertWithWhereUniqueWithoutFundInput = {
    where: FundDocumentWhereUniqueInput
    update: XOR<FundDocumentUpdateWithoutFundInput, FundDocumentUncheckedUpdateWithoutFundInput>
    create: XOR<FundDocumentCreateWithoutFundInput, FundDocumentUncheckedCreateWithoutFundInput>
  }

  export type FundDocumentUpdateWithWhereUniqueWithoutFundInput = {
    where: FundDocumentWhereUniqueInput
    data: XOR<FundDocumentUpdateWithoutFundInput, FundDocumentUncheckedUpdateWithoutFundInput>
  }

  export type FundDocumentUpdateManyWithWhereWithoutFundInput = {
    where: FundDocumentScalarWhereInput
    data: XOR<FundDocumentUpdateManyMutationInput, FundDocumentUncheckedUpdateManyWithoutFundInput>
  }

  export type FundDocumentScalarWhereInput = {
    AND?: FundDocumentScalarWhereInput | FundDocumentScalarWhereInput[]
    OR?: FundDocumentScalarWhereInput[]
    NOT?: FundDocumentScalarWhereInput | FundDocumentScalarWhereInput[]
    id?: StringFilter<"FundDocument"> | string
    fundId?: StringFilter<"FundDocument"> | string
    documentType?: EnumDocumentTypeFilter<"FundDocument"> | $Enums.DocumentType
    filename?: StringFilter<"FundDocument"> | string
    mimeType?: StringFilter<"FundDocument"> | string
    fileSize?: IntFilter<"FundDocument"> | number
    s3Key?: StringFilter<"FundDocument"> | string
    uploadedAt?: DateTimeFilter<"FundDocument"> | Date | string
  }

  export type FundCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateWithoutDocumentsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundCreateOrConnectWithoutDocumentsInput = {
    where: FundWhereUniqueInput
    create: XOR<FundCreateWithoutDocumentsInput, FundUncheckedCreateWithoutDocumentsInput>
  }

  export type FundUpsertWithoutDocumentsInput = {
    update: XOR<FundUpdateWithoutDocumentsInput, FundUncheckedUpdateWithoutDocumentsInput>
    create: XOR<FundCreateWithoutDocumentsInput, FundUncheckedCreateWithoutDocumentsInput>
    where?: FundWhereInput
  }

  export type FundUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: FundWhereInput
    data: XOR<FundUpdateWithoutDocumentsInput, FundUncheckedUpdateWithoutDocumentsInput>
  }

  export type FundUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    backgroundJobs?: BackgroundJobUncheckedUpdateManyWithoutFundNestedInput
  }

  export type FundCreateWithoutBackgroundJobsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    documents?: FundDocumentCreateNestedManyWithoutFundInput
  }

  export type FundUncheckedCreateWithoutBackgroundJobsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.FundStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: Date | string | null
    brainVersion?: number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    documents?: FundDocumentUncheckedCreateNestedManyWithoutFundInput
  }

  export type FundCreateOrConnectWithoutBackgroundJobsInput = {
    where: FundWhereUniqueInput
    create: XOR<FundCreateWithoutBackgroundJobsInput, FundUncheckedCreateWithoutBackgroundJobsInput>
  }

  export type FundUpsertWithoutBackgroundJobsInput = {
    update: XOR<FundUpdateWithoutBackgroundJobsInput, FundUncheckedUpdateWithoutBackgroundJobsInput>
    create: XOR<FundCreateWithoutBackgroundJobsInput, FundUncheckedCreateWithoutBackgroundJobsInput>
    where?: FundWhereInput
  }

  export type FundUpdateToOneWithWhereWithoutBackgroundJobsInput = {
    where?: FundWhereInput
    data: XOR<FundUpdateWithoutBackgroundJobsInput, FundUncheckedUpdateWithoutBackgroundJobsInput>
  }

  export type FundUpdateWithoutBackgroundJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    documents?: FundDocumentUpdateManyWithoutFundNestedInput
  }

  export type FundUncheckedUpdateWithoutBackgroundJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumFundStatusFieldUpdateOperationsInput | $Enums.FundStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormAnalysis?: NullableJsonNullValueInput | InputJsonValue
    selectionCriteriaAnalysis?: NullableJsonNullValueInput | InputJsonValue
    goodExamplesAnalysis?: NullableJsonNullValueInput | InputJsonValue
    brainAssembledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    brainVersion?: IntFieldUpdateOperationsInput | number
    fundBrain?: NullableJsonNullValueInput | InputJsonValue
    documents?: FundDocumentUncheckedUpdateManyWithoutFundNestedInput
  }

  export type BackgroundJobCreateManyFundInput = {
    id?: string
    type: $Enums.JobType
    status?: $Enums.JobStatus
    progress?: number
    totalDocuments?: number
    processedDocuments?: number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FundDocumentCreateManyFundInput = {
    id?: string
    documentType: $Enums.DocumentType
    filename: string
    mimeType: string
    fileSize: number
    s3Key: string
    uploadedAt?: Date | string
  }

  export type BackgroundJobUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BackgroundJobUncheckedUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BackgroundJobUncheckedUpdateManyWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumJobTypeFieldUpdateOperationsInput | $Enums.JobType
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    progress?: IntFieldUpdateOperationsInput | number
    totalDocuments?: IntFieldUpdateOperationsInput | number
    processedDocuments?: IntFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundDocumentUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundDocumentUncheckedUpdateWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FundDocumentUncheckedUpdateManyWithoutFundInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    filename?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    s3Key?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use FundCountOutputTypeDefaultArgs instead
     */
    export type FundCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FundCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FundDefaultArgs instead
     */
    export type FundArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FundDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FundDocumentDefaultArgs instead
     */
    export type FundDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FundDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BackgroundJobDefaultArgs instead
     */
    export type BackgroundJobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BackgroundJobDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}